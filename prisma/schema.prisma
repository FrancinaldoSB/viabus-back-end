// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// checked
model User {
  id         Int          @id @default(autoincrement())
  cpf        String?      @db.Char(11) @unique
  provider_id String      @db.Uuid
  name       String       @db.Char(100)
  email      String       @db.Char(100) @unique
  photo_url  String?      @db.Char(255)
  created_at DateTime     @default(now()) @db.Timestamp(6)

  addresses  Address[]
  tickets    Ticket[]
  telephones Telephone[]
  role       UserRole[]
  trips      Trip[]
}

// checked
model Address {
  id           Int      @id @default(autoincrement())
  user_id      Int
  street       String
  number       Int
  complement   String?
  neighborhood String
  city_name    String
  state        String
  cep          String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
} 

// checked
model Ticket {
  id               Int      @id @default(autoincrement())
  user_id          Int
  trip_id          Int
  boarding_stop_id Int
  arrival_stop_id  Int
  status           String
  additional_notes String?
  created_at       DateTime @default(now()) @db.Timestamp(6)

  user         User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  trip         Trip  @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  boardingStop Stop  @relation("BoardingStop", fields: [boarding_stop_id], references: [id], onDelete: Cascade)
  arrivalStop  Stop  @relation("ArrivalStop", fields: [arrival_stop_id], references: [id], onDelete: Cascade)
  payments     Payment[]
}

// checked
model Payment {
  id        Int      @id @default(autoincrement())
  ticket_id Int
  amount    Float
  method    String
  created_at DateTime @default(now()) @db.Timestamp(6)

  ticket Ticket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
}

// checked
model Telephone {
  id           Int      @id @default(autoincrement())
  user_id      Int
  phone_number String   @db.Char(50)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// checked
model Stop {
  id            Int       @id @default(autoincrement())
  city_id       Int
  name          String    @db.Char(100)
  boarding_time DateTime  @db.Time

  boardingTickets Ticket[] @relation("BoardingStop") // Embarque
  arrivalTickets  Ticket[] @relation("ArrivalStop") // Desembarque
  originPrices    RoutePrice[] @relation("OriginStop") // Lista com todos os preços de origem para outras cidades
  destinationPrices RoutePrice[] @relation("DestinationStop") // Lista com todos os preços de destino para outras cidades
  routeStops      RouteStop[]
  stopAddresses   StopAddress[]
  
}

// checked
model StopAddress {
  id            Int    @id @default(autoincrement())
  stop_id       Int
  street        String
  number        Int
  complement    String?
  neighborhood  String
  city_name     String
  state         String
  cep           Int

  stop Stop @relation(fields: [stop_id], references: [id], onDelete: Cascade)
}

// checked
model Route {
  id                  Int          @id @default(autoincrement())
  name                String
  total_distance      Int
  total_duration      String

  routeStops          RouteStop[]
  trips               Trip[]
  routeSchedules      RouteSchedule[]
  routePrices         RoutePrice[]
}

// checked
model RoutePrice {
  id                 Int      @id @default(autoincrement())
  route_id           Int
  origin_stop_id     Int
  destination_stop_id Int
  price              Float

  route              Route    @relation(fields: [route_id], references: [id], onDelete: Cascade)
  originStop         Stop     @relation("OriginStop", fields: [origin_stop_id], references: [id], onDelete: Cascade)
  destinationStop    Stop     @relation("DestinationStop", fields: [destination_stop_id], references: [id], onDelete: Cascade)

  @@unique([route_id, origin_stop_id, destination_stop_id]) // Garantir que não haja duplicação
}

// checked
model RouteStop {
  id             Int      @id @default(autoincrement())
  route_id       Int
  stop_id        Int
  stop_order     Int

  route Route @relation(fields: [route_id], references: [id], onDelete: Cascade)
  stop  Stop  @relation(fields: [stop_id], references: [id], onDelete: Cascade)
}

// checked
model RouteSchedule {
  id             Int      @id @default(autoincrement())
  route_id       Int
  day_of_week    Int
  active         Boolean  @default(true)

  route Route @relation(fields: [route_id], references: [id], onDelete: Cascade)
}

// checked
model Trip {
  id        Int      @id @default(autoincrement())
  route_id  Int
  driver_id Int
  start_date DateTime @db.Date
  end_date   DateTime?
  status    String   @default("planned")

  route      Route        @relation(fields: [route_id], references: [id], onDelete: Cascade)
  driver     User         @relation(fields: [driver_id], references: [id], onDelete: Cascade)
  tickets    Ticket[]     // Relação um-para-muitos com Ticket
}

// checked
model UserRole {
  id       Int      @id @default(autoincrement())
  user_id  Int
  role_name String  @db.Char(8)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
